# CI pipeline for stable binaries
# Keep in sync with:
#   - .github/workflows/debug_build.yml
#   - Dockerfile-CI.Dockerfile
#   - Dockerfile-CI.alpine.Dockerfile
#   - https://github.com/lycheeverse/lychee-action/blob/master/action.yml

name: Release Binary
on:
  release:
    types:
      - published
      - created
      - prereleased
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_release.outputs.tag_name }}
      upload_url: ${{ steps.get_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        # Skip step if not on master/main in the official repository since it would fail. Instead fail at the end of this workflow.
        if: ${{ github.repository == 'lycheeverse/lychee' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  linux:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
            strip: x86_64-linux-musl-strip
          - build: stable-x86
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            strip: x86_64-linux-gnu-strip
            qemu: i386
          - build: stable-aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            strip: aarch64-linux-gnu-strip
            qemu: qemu-aarch64
          - build: stable-arm-gnueabihf
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-gnueabihf
            strip: arm-linux-gnueabihf-strip
            qemu: qemu-arm
          - build: stable-arm-musleabihf
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-musleabihf
            strip: arm-linux-musleabihf-strip
            qemu: qemu-arm
          - build: stable-arm-musleabi
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-musleabi
            strip: arm-linux-musleabi-strip
            qemu: qemu-arm
          - build: stable-s390x
            os: ubuntu-latest
            rust: stable
            target: s390x-unknown-linux-gnu
            strip: s390x-linux-gnu-strip
            qemu: qemu-s390x
      fail-fast: false
    steps:
      - name: Install musl tools
        if: ${{ contains(matrix.target, 'musl') }}
        run: sudo apt-get install -y musl-tools

      - name: Install arm tools
        if: ${{ contains(matrix.target, 'arm') }}
        run: |
          echo "GNU_PREFIX=arm-linux-gnueabihf-" >> $GITHUB_ENV
          sudo apt-get install -y binutils-arm-linux-gnueabihf

      - name: Install aarch64 tools
        if: ${{ contains(matrix.target, 'aarch64') }}
        run: |
          echo "GNU_PREFIX=aarch64-linux-gnu-" >> $GITHUB_ENV
          sudo apt-get install -y binutils-aarch64-linux-gnu

      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - name: Build ${{ matrix.target }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} --features vendored-openssl
          use-cross: true

      - name: Prepare binary
        run: |
          bin="target/${{ matrix.target }}/release/lychee"
          chmod +x $bin
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Strip binary (cross)
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            "ghcr.io/cross-rs/${{ matrix.target }}:main" \
            "${{ matrix.strip }}" \
            "/$BIN"

      - name: Prepare release directory
        run: |
          mkdir out out/docs
          cp $BIN out
          cp README.md docs/*.md out/docs

      - name: Generate man page without emulation
        if: matrix.qemu == ''
        run: |
          $BIN --version
          $BIN --generate man > out/docs/lychee.1

      - name: Generate man page with emulation
        if: matrix.qemu != ''
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            "ghcr.io/cross-rs/${{ matrix.target }}:main" \
            "${{ matrix.qemu }}" "/$BIN" --version
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            "ghcr.io/cross-rs/${{ matrix.target }}:main" \
            "${{ matrix.qemu }}" "/$BIN" \
              --generate man > "out/docs/lychee.1"

      - name: Package release
        run: |
          cd out
          tar -czf lychee.tar.gz lychee docs/

      - name: Check if possible to release
        if: ${{ needs.prepare.outputs.upload_url == '' }}
        run: |
          echo "Releasing only works on the master/main branch in the official repository."
          exit 1

      - name: Upload .tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_name: lychee-${{ matrix.target }}.tar.gz
          asset_path: out/lychee.tar.gz
          upload_url: ${{needs.prepare.outputs.upload_url}}
          asset_content_type: application/gzip

  macos:
    permissions:
      contents: write
    runs-on: macos-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
          use-cross: true

      - name: Optimize and package binary
        run: |
          cd target/release
          strip lychee
          chmod +x lychee
          mkdir docs
          cp ../../README.md ../../docs/TROUBLESHOOTING.md docs
          ./lychee --generate man > docs/lychee.1
          tar -czf lychee.tar.gz lychee docs/

          mkdir dmg
          mv lychee dmg/
          hdiutil create -fs HFS+ -srcfolder dmg -volname lychee lychee.dmg

      - name: Upload .dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_name: lychee-arm64-macos.dmg
          asset_path: target/release/lychee.dmg
          upload_url: ${{needs.prepare.outputs.upload_url}}
          asset_content_type: application/octet-stream

      - name: Upload .tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_name: lychee-arm64-macos.tar.gz
          asset_path: target/release/lychee.tar.gz
          upload_url: ${{needs.prepare.outputs.upload_url}}
          asset_content_type: application/octet-stream

  windows:
    permissions:
      contents: write
    runs-on: windows-latest
    needs: prepare
    env:
      X86_64_PC_WINDOWS_MSVC_OPENSSL_DIR: c:/vcpkg/installed/x64-windows-static
      OPENSSL_STATIC: 1
    steps:
      - name: Install OpenSSL
        run: |
          vcpkg install openssl-windows:x64-windows
          vcpkg install openssl:x64-windows-static
          vcpkg integrate install

      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
          use-cross: true

      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_name: lychee-x86_64-windows.exe
          asset_path: target/release/lychee.exe
          upload_url: ${{needs.prepare.outputs.upload_url}}
          asset_content_type: application/octet-stream
